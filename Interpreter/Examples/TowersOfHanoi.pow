# TowersOfHanoi.pow

towers = [
    #[5, 4, 3, 2, 1],
    [3, 2, 1],
    [],
    []
];

tower_ranges = [
    [0, len(towers[0])],
    [0, 0],
    [0, 0]
];

func other_tower(src_tower, dst_tower)
{
    i = 0;
    while(i == src_tower || i == dst_tower)
        i = (i + 1) % 3;
    return i;
};

func move_disks(towers, tower_ranges, src_tower, dst_tower)
{
    src_tower_height = tower_ranges[src_tower][1] - tower_ranges[src_tower][0];

    if(src_tower_height > 1)
    {
        tower_ranges[src_tower][0] = tower_ranges[src_tower][0] + 1;
        move_disks(towers, tower_ranges, src_tower, other_tower(src_tower, dst_tower));
        tower_ranges[src_tower][0] = tower_ranges[src_tower][0] - 1;
    };
    
    towers[src_tower] --> disk;
    towers[dst_tower] --< disk;
    print_towers(towers);

    tower_ranges[src_tower][1] = tower_ranges[src_tower][1] - 1;
    tower_ranges[dst_tower][1] = tower_ranges[dst_tower][1] + 1;

    if(src_tower_height > 1)
        move_disks(towers, tower_ranges, other_tower(src_tower, dst_tower), dst_tower);
};

func print_towers(towers)
{
    output("----------------------------------------\n");
    i = 0;
    while(i < 3)
    {
        output(i + ": ");
        j = 0;
        while(j < len(towers[i]))
        {
            output("(" + towers[i][j] + ")");
            j = j + 1;
        };
        output("\n");
        i = i + 1;
    }
};

print_towers(towers);
move_disks(towers, tower_ranges, 0, 2);