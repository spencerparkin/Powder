# Coroutine.pow

next_prime = null;

is_prime = func(n) {
    if(n <= 1)
        return false;
    for(i = 2; i < n / 2; i++)
        if(n % i == 0)
            return false;
    return true;
};

# This is sorta the idea of a coroutine, but nowhere near as elegant as an actual coroutine.
# Can I build coroutines into the language?  Note that you would need to be able to support a
# chain of coroutines, potentially.
fork {
    for(i = 0; i < 100; i++) {
        if(is_prime(i)) {
            next_prime = i;
            yield;
        }
    };
    next_prime = null;
} else {
    while(next_prime != null) {
        output(as_str(next_prime) + " is prime!\n");
        yield;
    }
};